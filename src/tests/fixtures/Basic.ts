/**
 * Code generated by github.com/macoolka/macoolka-gen-model, DO NOT EDIT.
 */
export interface NonEmptyArray<A> extends Array<A> {
    0: A
}


export type City = 'A' | 'B' | 'C'
export type Empty = never
export interface T1 {
  name1: string
}
interface T2 {
  name2?: string
}
export interface Basic extends T1, T2 {
  string: string
  number?: number
  date?: Date
  int?: number
  boolean?: boolean
  json1?: Record<string,any>
  string_kind?: string
  number_kind?: number
  int_kind?: number
  datetime_kind?: Date
  json_kind?: Record<string,any>
  boolean_kind?: boolean
  enum_kind?: 'a' | 'b'
  enum_t_kind?: City
  kind_kind?: 'k'
  type_kind?: T1
  typeUnion_kind?: T1 | T2
  add:(
    string: string,
    number?: number,
    date?: Date,
    int?: number,
    boolean?: boolean,
    json1?: Record<string,any>,
    string_kind?: string,
    number_kind?: number,
    int_kind?: number,
    datetime_kind?: Date,
    json_kind?: Record<string,any>,
    boolean_kind?: boolean,
    enum_kind?: 'a' | 'b',
    enum_t_kind?: City,
    kind_kind?: 'k',
    type_kind?: T1,
    typeUnion_kind?: T1 | T2,
  ) => void
}


